// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	films_api "github.com/blazee5/film-api/api/proto/v1"
	"github.com/blazee5/film-api/users/internal/models"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: db, in
func (_m *UserService) CreateUser(db *gorm.DB, in *films_api.User) (int64, error) {
	ret := _m.Called(db, in)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *films_api.User) (int64, error)); ok {
		return rf(db, in)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *films_api.User) int64); ok {
		r0 = rf(db, in)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *films_api.User) error); ok {
		r1 = rf(db, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: db, in
func (_m *UserService) DeleteUser(db *gorm.DB, in *films_api.UserRequest) error {
	ret := _m.Called(db, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *films_api.UserRequest) error); ok {
		r0 = rf(db, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: db, in
func (_m *UserService) GetUser(db *gorm.DB, in *films_api.UserRequest) (*films_api.UserInfo, error) {
	ret := _m.Called(db, in)

	var r0 *films_api.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *films_api.UserRequest) (*films_api.UserInfo, error)); ok {
		return rf(db, in)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *films_api.UserRequest) *films_api.UserInfo); ok {
		r0 = rf(db, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*films_api.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *films_api.UserRequest) error); ok {
		r1 = rf(db, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: db, users
func (_m *UserService) UpdateUser(db *gorm.DB, user *films_api.User) (*films_api.User, error) {
	ret := _m.Called(db, user)

	var r0 *films_api.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *films_api.User) (*films_api.User, error)); ok {
		return rf(db, user)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *films_api.User) *films_api.User); ok {
		r0 = rf(db, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*films_api.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *films_api.User) error); ok {
		r1 = rf(db, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateUser provides a mock function with given fields: db, email, password
func (_m *UserService) ValidateUser(db *gorm.DB, email string, password string) (*models.User, error) {
	ret := _m.Called(db, email, password)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, string) (*models.User, error)); ok {
		return rf(db, email, password)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, string, string) *models.User); ok {
		r0 = rf(db, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, string, string) error); ok {
		r1 = rf(db, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
